{
	"info": {
		"_postman_id": "d3e8c249-837a-4608-98ed-3bd39387a370",
		"name": "multiple-inheritance-demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16653994"
	},
	"item": [
		{
			"name": "Audio Book",
			"item": [
				{
					"name": "Automatic tests",
					"item": [
						{
							"name": "Get All Audio-Books returns all Audio-books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response is not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.null;",
											"});",
											"",
											"pm.test(\"A saved entity beforehand is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    const request = pm.variables.get(\"RANDOM_AUDIOBOOK\");",
											"",
											"    var found = false;",
											"    jsonData.forEach(book =>{",
											"        if(book.isbn === request.isbn.toString()){",
											"            found = true;",
											"            pm.expect(book.title).to.equal(request.title);",
											"            pm.expect(book.isbn).to.equal(request.isbn.toString());",
											"            pm.expect(book.trackCount).to.equal(request.trackCount);",
											"            pm.expect(book.interpret.firstName).to.equal(request.interpret.firstName);",
											"            pm.expect(book.interpret.lastName).to.equal(request.interpret.lastName);",
											"            pm.expect(book.author.firstName).to.equal(request.author.firstName);",
											"            pm.expect(book.author.lastName).to.equal(request.author.lastName);",
											"        }",
											"    })",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/audio-books\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_AUDIOBOOK\")",
											"",
											"",
											"console.log(payload)",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/audio-books",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Books returns all Audio-books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response is not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.null;",
											"});",
											"",
											"pm.test(\"A saved entity beforehand is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    const request = pm.variables.get(\"RANDOM_AUDIOBOOK\");",
											"",
											"    var found = false;",
											"    jsonData.forEach(book =>{",
											"        if(book.isbn === request.isbn.toString()){",
											"            found = true;",
											"            pm.expect(book.title).to.equal(request.title);",
											"            pm.expect(book.isbn).to.equal(request.isbn.toString());",
											"            pm.expect(book.trackCount).to.equal(request.trackCount);",
											"            pm.expect(book.interpret.firstName).to.equal(request.interpret.firstName);",
											"            pm.expect(book.interpret.lastName).to.equal(request.interpret.lastName);",
											"            pm.expect(book.author.firstName).to.equal(request.author.firstName);",
											"            pm.expect(book.author.lastName).to.equal(request.author.lastName);",
											"        }",
											"    })",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/audio-books\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_AUDIOBOOK\")",
											"",
											"",
											"console.log(payload)",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/audio-books",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Recordings returns all Audio-books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response is not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.null;",
											"});",
											"",
											"pm.test(\"A saved entity beforehand is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    const request = pm.variables.get(\"RANDOM_AUDIOBOOK\");",
											"",
											"    var found = false;",
											"    jsonData.forEach(book =>{",
											"        if(book.isbn === request.isbn.toString()){",
											"            found = true;",
											"            pm.expect(book.title).to.equal(request.title);",
											"            pm.expect(book.isbn).to.equal(request.isbn.toString());",
											"            pm.expect(book.trackCount).to.equal(request.trackCount);",
											"            pm.expect(book.interpret.firstName).to.equal(request.interpret.firstName);",
											"            pm.expect(book.interpret.lastName).to.equal(request.interpret.lastName);",
											"            pm.expect(book.author.firstName).to.equal(request.author.firstName);",
											"            pm.expect(book.author.lastName).to.equal(request.author.lastName);",
											"        }",
											"    })",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/audio-books\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_AUDIOBOOK\")",
											"",
											"",
											"console.log(payload)",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/audio-books",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AudioBook by ISNB returns correct value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/audio-books\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_AUDIOBOOK\")",
											"",
											"",
											"console.log(payload)",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});",
											"pm.variables.set(\"ISBN\",payload.isbn);",
											"",
											"///pm.variables.replaceIn(\"{{$randomFirstName}}\")",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Correct data are persisted\", function () {",
											"    var jsonData = pm.response.json();",
											"    const request = pm.variables.get(\"RANDOM_AUDIOBOOK\");",
											"",
											"    pm.expect(jsonData.title).to.equal(request.title);",
											"    pm.expect(jsonData.isbn).to.equal(request.isbn.toString());",
											"    pm.expect(jsonData.trackCount).to.equal(request.trackCount);",
											"    ",
											"    pm.expect(jsonData.interpret.firstName).to.equal(request.interpret.firstName);",
											"    pm.expect(jsonData.interpret.lastName).to.equal(request.interpret.lastName);",
											"",
											"    pm.expect(jsonData.author.firstName).to.equal(request.author.firstName);",
											"    pm.expect(jsonData.author.lastName).to.equal(request.author.lastName);",
											"});",
											"",
											"",
											"pm.test(\"URI is generated for all entities\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.uri).to.exist;",
											"    pm.expect(jsonData.author.uri).to.exist;",
											"    pm.expect(jsonData.interpret.uri).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/audio-books/{{ISBN}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books",
										"{{ISBN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Book by ISNB returns correct Audio-book",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/audio-books\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_AUDIOBOOK\")",
											"",
											"",
											"console.log(payload)",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});",
											"pm.variables.set(\"ISBN\",payload.isbn);",
											"",
											"///pm.variables.replaceIn(\"{{$randomFirstName}}\")",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Correct data are persisted\", function () {",
											"    var jsonData = pm.response.json();",
											"    const request = pm.variables.get(\"RANDOM_AUDIOBOOK\");",
											"",
											"    pm.expect(jsonData.title).to.equal(request.title);",
											"    pm.expect(jsonData.isbn).to.equal(request.isbn.toString());",
											"    pm.expect(jsonData.trackCount).to.equal(request.trackCount);",
											"    ",
											"    pm.expect(jsonData.interpret.firstName).to.equal(request.interpret.firstName);",
											"    pm.expect(jsonData.interpret.lastName).to.equal(request.interpret.lastName);",
											"",
											"    pm.expect(jsonData.author.firstName).to.equal(request.author.firstName);",
											"    pm.expect(jsonData.author.lastName).to.equal(request.author.lastName);",
											"});",
											"",
											"",
											"pm.test(\"URI is generated for all entities\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.uri).to.exist;",
											"    pm.expect(jsonData.author.uri).to.exist;",
											"    pm.expect(jsonData.interpret.uri).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/audio-books/{{ISBN}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books",
										"{{ISBN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete by ISNB deletes entity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/audio-books\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_AUDIOBOOK\")",
											"",
											"",
											"console.log(payload)",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});",
											"pm.variables.set(\"ISBN\",payload.isbn);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"pm.test(\"Find by ISNB returns 404\", function () {",
											"    pm.sendRequest(pm.variables.replaceIn(\"{{URL}}/audio-books/{{ISBN}}\"), function (err, response) {",
											"        pm.expect(response.code).to.equal(404)",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/audio-books/{{ISBN}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books",
										"{{ISBN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update updates entity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/audio-books\");",
											"",
											"",
											"var payload =  pm.variables.get(\"RANDOM_AUDIOBOOK\");",
											"",
											"payload.author= null;",
											"payload.uri = \"http://onto.fel.cvut.cz/ontologies/inheritance-demo/\" +_.random(10000, 999999999)",
											"payload.interpret.uri = \"http://onto.fel.cvut.cz/ontologies/inheritance-demo/\" +_.random(10000, 999999999)",
											"",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"/// save book",
											"pm.sendRequest(postRequest, (error, response) => {",
											"    console.log(error ? error : \"\");  ",
											"});",
											"",
											"pm.variables.set(\"ISBN\",payload.isbn);",
											"",
											"",
											"",
											"/// get book with created URIs",
											"",
											"const changed  =  {",
											"    \"uri\": payload.uri,",
											"    \"interpret\": {",
											"        \"uri\":payload.interpret.uri,",
											"        \"firstName\": payload.interpret.firstName + \" new\",",
											"        \"lastName\": payload.interpret.lastName+\" new\"",
											"    },",
											"    \"trackCount\": payload.trackCount +1,",
											"    \"author\": {",
											"        \"firstName\": pm.variables.replaceIn(\"{{$randomFirstName}}\"),",
											"        \"lastName\": pm.variables.replaceIn(\"{{$randomLastName}}\")",
											"    },",
											"    \"title\": payload.title + \"  second edition\",",
											"    \"isbn\": payload.isbn",
											"}",
											"pm.variables.set(\"CHANGED_AUDIO_BOOK\", JSON.stringify(changed));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Service returns updated entity\", function () {",
											"    pm.sendRequest(pm.variables.replaceIn(\"{{URL}}/audio-books/{{ISBN}}\"), function (err, response) {",
											"        ",
											"    const jsonData = response.json();",
											"    const request =JSON.parse(pm.variables.get(\"CHANGED_AUDIO_BOOK\"));",
											"",
											"",
											"    pm.expect(jsonData.title).to.equal(request.title);",
											"    pm.expect(jsonData.isbn).to.equal(request.isbn.toString());",
											"    pm.expect(jsonData.trackCount).to.equal(request.trackCount);",
											"    pm.expect(jsonData.uri).to.equal(request.uri);",
											"    ",
											"    pm.expect(jsonData.interpret.firstName).to.equal(request.interpret.firstName);",
											"    pm.expect(jsonData.interpret.lastName).to.equal(request.interpret.lastName);",
											"    pm.expect(jsonData.interpret.uri).to.equal(request.interpret.uri);",
											"",
											"    pm.expect(jsonData.author.firstName).to.equal(request.author.firstName);",
											"    pm.expect(jsonData.author.lastName).to.equal(request.author.lastName);",
											"",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{CHANGED_AUDIO_BOOK}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/audio-books/{{ISBN}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books",
										"{{ISBN}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Manual requests",
					"item": [
						{
							"name": "Get all audio books",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/audio-books",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new audio book",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"title\": \"Some Nice Book \",\n        \"isbn\": \"41515154312\",\n        \"interpret\": {\n            \"firstName\": \"In\",\n            \"lastName\": \"Terpret\"\n        },\n        \"trackCount\": 42,\n        \"author\": {\n            \"firstName\": \"Au\",\n            \"lastName\": \"Thor\"\n        }\n}\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/audio-books",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get audio book by ISNB",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/audio-books/41515154312",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books",
										"41515154312"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update audio book",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uri\": \"http://onto.fel.cvut.cz/ontologies/inheritance-demo/41515154312\",\n    \"interpret\": {\n        \"uri\": \"http://onto.fel.cvut.cz/ontologies/inheritance-demo/In+Terpret\",\n        \"firstName\": \"In\",\n        \"lastName\": \"Terpret\"\n    },\n    \"trackCount\": 42,\n    \"author\": {\n        \"uri\": \"http://onto.fel.cvut.cz/ontologies/inheritance-demo/Au+Thor\",\n        \"firstName\": \"Au\",\n        \"lastName\": \"Thor\"\n    },\n    \"title\": \"Some Nice Book \",\n    \"isbn\": \"41515154312\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/audio-books/41515154312",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books",
										"41515154312"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete audio book by ISNB",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/audio-books/41515154312",
									"host": [
										"{{URL}}"
									],
									"path": [
										"audio-books",
										"41515154312"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all books",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/books",
									"host": [
										"{{URL}}"
									],
									"path": [
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all recordings",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/recordings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"recordings"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Copier",
			"item": [
				{
					"name": "Automatic Tests",
					"item": [
						{
							"name": "Get All Copiers returns ALL Copiers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/copiers\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_COPIER\")",
											"",
											"",
											"console.log(payload)",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response is not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.null;",
											"});",
											"",
											"pm.test(\"A saved entity beforehand is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    const request = pm.variables.get(\"RANDOM_COPIER\");",
											"",
											"",
											"    var found = false;",
											"    jsonData.forEach(copier =>{",
											"            console.log(request);",
											"            console.log(jsonData)",
											"",
											"        if(copier.key === request.key.toString()){",
											"            found = true;",
											"",
											"            pm.expect(copier.freestanding).to.equal(request.freestanding);",
											"            pm.expect(copier.color).to.equal(request.color);",
											"            pm.expect(copier.scanDPI).to.equal(request.scanDPI);",
											"            pm.expect(copier.bwPagesPerMinute).to.equal(request.bwPagesPerMinute);",
											"            pm.expect(copier.colorPagesPerMinute).to.equal(request.colorPagesPerMinute);",
											"            pm.expect(copier.scansPerMinute).to.equal(request.scansPerMinute);",
											"            pm.expect(copier.printDPI).to.equal(request.printDPI);",
											"            pm.expect(_.isEqual(_.sortBy(copier.wireless), _.sortBy(request.wireless))).to.be.true",
											"            pm.expect(_.isEqual(_.sortBy(copier.connectors), _.sortBy(request.connectors))).to.be.true",
											"        }",
											"        ",
											"    })",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/copiers",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Devices returns ALL Copiers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/copiers\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_COPIER\")",
											"",
											"",
											"console.log(payload)",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response is not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.null;",
											"});",
											"",
											"pm.test(\"A saved entity beforehand is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    const request = pm.variables.get(\"RANDOM_COPIER\");",
											"",
											"",
											"    var found = false;",
											"    jsonData.forEach(copier =>{",
											"            console.log(request);",
											"            console.log(jsonData)",
											"",
											"        if(copier.key === request.key.toString()){",
											"            found = true;",
											"",
											"            pm.expect(copier.freestanding).to.equal(request.freestanding);",
											"            pm.expect(copier.color).to.equal(request.color);",
											"            pm.expect(copier.scanDPI).to.equal(request.scanDPI);",
											"            pm.expect(copier.bwPagesPerMinute).to.equal(request.bwPagesPerMinute);",
											"            pm.expect(copier.colorPagesPerMinute).to.equal(request.colorPagesPerMinute);",
											"            pm.expect(copier.scansPerMinute).to.equal(request.scansPerMinute);",
											"            pm.expect(copier.printDPI).to.equal(request.printDPI);",
											"            pm.expect(_.isEqual(_.sortBy(copier.wireless), _.sortBy(request.wireless))).to.be.true",
											"            pm.expect(_.isEqual(_.sortBy(copier.connectors), _.sortBy(request.connectors))).to.be.true",
											"        }",
											"        ",
											"    })",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/copiers",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Printers returns ALL Copiers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/copiers\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_COPIER\")",
											"",
											"",
											"console.log(payload)",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response is not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.null;",
											"});",
											"",
											"pm.test(\"A saved entity beforehand is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    const request = pm.variables.get(\"RANDOM_COPIER\");",
											"",
											"",
											"    var found = false;",
											"    jsonData.forEach(copier =>{",
											"            console.log(request);",
											"            console.log(jsonData)",
											"",
											"        if(copier.key === request.key.toString()){",
											"            found = true;",
											"",
											"            pm.expect(copier.freestanding).to.equal(request.freestanding);",
											"            pm.expect(copier.color).to.equal(request.color);",
											"            pm.expect(copier.scanDPI).to.equal(request.scanDPI);",
											"            pm.expect(copier.bwPagesPerMinute).to.equal(request.bwPagesPerMinute);",
											"            pm.expect(copier.colorPagesPerMinute).to.equal(request.colorPagesPerMinute);",
											"            pm.expect(copier.scansPerMinute).to.equal(request.scansPerMinute);",
											"            pm.expect(copier.printDPI).to.equal(request.printDPI);",
											"            pm.expect(_.isEqual(_.sortBy(copier.wireless), _.sortBy(request.wireless))).to.be.true",
											"            pm.expect(_.isEqual(_.sortBy(copier.connectors), _.sortBy(request.connectors))).to.be.true",
											"        }",
											"        ",
											"    })",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/copiers",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Scanners returns ALL Copiers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/copiers\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_COPIER\")",
											"",
											"",
											"console.log(payload)",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response is not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.null;",
											"});",
											"",
											"pm.test(\"A saved entity beforehand is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    const request = pm.variables.get(\"RANDOM_COPIER\");",
											"",
											"",
											"    var found = false;",
											"    jsonData.forEach(copier =>{",
											"            console.log(request);",
											"            console.log(jsonData)",
											"",
											"        if(copier.key === request.key.toString()){",
											"            found = true;",
											"",
											"            pm.expect(copier.freestanding).to.equal(request.freestanding);",
											"            pm.expect(copier.color).to.equal(request.color);",
											"            pm.expect(copier.scanDPI).to.equal(request.scanDPI);",
											"            pm.expect(copier.bwPagesPerMinute).to.equal(request.bwPagesPerMinute);",
											"            pm.expect(copier.colorPagesPerMinute).to.equal(request.colorPagesPerMinute);",
											"            pm.expect(copier.scansPerMinute).to.equal(request.scansPerMinute);",
											"            pm.expect(copier.printDPI).to.equal(request.printDPI);",
											"            pm.expect(_.isEqual(_.sortBy(copier.wireless), _.sortBy(request.wireless))).to.be.true",
											"            pm.expect(_.isEqual(_.sortBy(copier.connectors), _.sortBy(request.connectors))).to.be.true",
											"        }",
											"        ",
											"    })",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/copiers",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Copier by Key returns correct value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/copiers\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_COPIER\")",
											"",
											"",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});",
											"pm.variables.set(\"KEY\",payload.key);",
											"",
											"///pm.variables.replaceIn(\"{{$randomFirstName}}\")",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Correct data are persisted\", function () {",
											"    var jsonData = pm.response.json();",
											"    const request = pm.variables.get(\"RANDOM_COPIER\");",
											"",
											"    pm.expect(jsonData.freestanding).to.equal(request.freestanding);",
											"    pm.expect(jsonData.color).to.equal(request.color);",
											"    pm.expect(jsonData.scanDPI).to.equal(request.scanDPI);",
											"    pm.expect(jsonData.bwPagesPerMinute).to.equal(request.bwPagesPerMinute);",
											"    pm.expect(jsonData.colorPagesPerMinute).to.equal(request.colorPagesPerMinute);",
											"    pm.expect(jsonData.scansPerMinute).to.equal(request.scansPerMinute);",
											"    pm.expect(jsonData.printDPI).to.equal(request.printDPI);",
											"    pm.expect(_.isEqual(_.sortBy(jsonData.wireless), _.sortBy(request.wireless))).to.be.true",
											"    pm.expect(_.isEqual(_.sortBy(jsonData.connectors), _.sortBy(request.connectors))).to.be.true",
											"});",
											"",
											"",
											"pm.test(\"URI is generated\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.uri).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/copiers/{{KEY}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers",
										"{{KEY}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete by key deletes entity Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/copiers\");",
											"",
											"",
											"const payload =  pm.variables.get(\"RANDOM_COPIER\")",
											"",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : \"\");",
											"});",
											"",
											"pm.variables.set(\"KEY\",payload.key);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"pm.test(\"Find by ISNB returns 404\", function () {",
											"    pm.sendRequest(pm.variables.replaceIn(\"{{URL}}/copiers/{{KEY}}\"), function (err, response) {",
											"        pm.expect(response.code).to.equal(404)",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/copiers/{{KEY}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers",
										"{{KEY}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update updates entity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.variables.replaceIn(\"{{URL}}/copiers\");",
											"",
											"",
											"var payload =  pm.variables.get(\"RANDOM_COPIER\");",
											"",
											"payload.uri = \"http://onto.fel.cvut.cz/ontologies/inheritance-demo/\" +_.random(10000, 999999999)",
											"",
											"console.log(payload);",
											"",
											"const postRequest = {",
											"  url: url,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(payload)",
											"  }",
											"};",
											"",
											"/// save book",
											"pm.sendRequest(postRequest, (error, response) => {",
											"    console.log(error ? error : \"\");  ",
											"});",
											"",
											"pm.variables.set(\"KEY\",payload.key);",
											"",
											"",
											"",
											"/// get book with created URIs",
											"var changed = {",
											"        \"uri\":payload.uri,",
											"        \"key\": payload.key,",
											"        \"freestanding\": false,",
											"        \"color\": false,",
											"        \"connectors\": [],",
											"        \"wireless\": [],",
											"        \"scanDPI\": payload.scanDPI+1,",
											"        \"bwPagesPerMinute\": payload.bwPagesPerMinute-1,",
											"        \"colorPagesPerMinute\": payload.colorPagesPerMinute + 200,",
											"        \"scansPerMinute\": 1,",
											"        \"printDPI\": payload.printDPI+10",
											"    }",
											"changed.connectors.push(\"new-conn\")",
											"changed.wireless.push(\"new-less\")",
											"",
											"",
											"",
											"pm.variables.set(\"CHANGED_COPIER\", JSON.stringify(changed));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Service returns updated entity\", function () {",
											"    pm.sendRequest(pm.variables.replaceIn(\"{{URL}}/copiers/{{KEY}}\"), function (err, response) {",
											"        ",
											"    const jsonData = response.json();",
											"    const request =JSON.parse(pm.variables.get(\"CHANGED_COPIER\"));",
											"",
											"    pm.expect(jsonData.freestanding).to.equal(request.freestanding);",
											"    pm.expect(jsonData.color).to.equal(request.color);",
											"    pm.expect(jsonData.scanDPI).to.equal(request.scanDPI);",
											"    pm.expect(jsonData.bwPagesPerMinute).to.equal(request.bwPagesPerMinute);",
											"    pm.expect(jsonData.colorPagesPerMinute).to.equal(request.colorPagesPerMinute);",
											"    pm.expect(jsonData.scansPerMinute).to.equal(request.scansPerMinute);",
											"    pm.expect(jsonData.printDPI).to.equal(request.printDPI);",
											"",
											"    pm.expect(_.isEqual(_.sortBy(jsonData.wireless), _.sortBy(request.wireless))).to.be.true",
											"    pm.expect(_.isEqual(_.sortBy(jsonData.connectors), _.sortBy(request.connectors))).to.be.true",
											"",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{CHANGED_COPIER}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/copiers/{{KEY}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers",
										"{{KEY}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Manual requests",
					"item": [
						{
							"name": "Get all copiers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/copiers",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new copier",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"uri\": \"http://onto.fel.cvut.cz/ontologies/inheritance-demo/copier-1548131\",\n        \"key\": \"1548131\",\n        \"freestanding\": false,\n        \"connectors\": [\n            \"HDMI\"\n        ],\n        \"wireless\": [\n            \"Bluetooth\",\n            \"Infrared\"\n        ],\n        \"color\": true,\n        \"printDPI\": 168,\n        \"scanDPI\": 169,\n        \"bwPagesPerMinute\": 1,\n        \"colorPagesPerMinute\": 1,\n        \"scansPerMinute\": 1\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/copiers",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get copier by key",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/copiers/1548131",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers",
										"1548131"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update updates entity Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"uri\": \"http://onto.fel.cvut.cz/ontologies/inheritance-demo/copier-1548131\",\n        \"key\": \"1548131\",\n        \"freestanding\": true,\n        \"connectors\": [\n            \"HDMI-2\"\n        ],\n        \"wireless\": [\n            \"Bluetooth-0.1\",\n            \"Infrared-10.9\"\n        ],\n        \"color\": true,\n        \"printDPI\": 200,\n        \"scanDPI\": 200,\n        \"bwPagesPerMinute\": 10,\n        \"colorPagesPerMinute\": 10,\n        \"scansPerMinute\": 10\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/copiers/1548131",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers",
										"1548131"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete by key",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/copiers/1548131",
									"host": [
										"{{URL}}"
									],
									"path": [
										"copiers",
										"1548131"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all devices",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/books",
									"host": [
										"{{URL}}"
									],
									"path": [
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all printers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/printers",
									"host": [
										"{{URL}}"
									],
									"path": [
										"printers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all scanners",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/scanners",
									"host": [
										"{{URL}}"
									],
									"path": [
										"scanners"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const isbn =_.random(10000, 999999999);",
					"",
					"const audiobook  =  {",
					"        \"interpret\": {",
					"            \"firstName\": pm.variables.replaceIn(\"{{$randomFirstName}}\"),",
					"            \"lastName\": pm.variables.replaceIn(\"{{$randomLastName}}\")",
					"        },",
					"        \"trackCount\": _.random(0,20),",
					"        \"author\": {",
					"            \"firstName\": pm.variables.replaceIn(\"{{$randomFirstName}}\"),",
					"            \"lastName\": pm.variables.replaceIn(\"{{$randomLastName}}\")",
					"        },",
					"        \"title\": pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"),",
					"        \"isbn\":isbn",
					"    }",
					"pm.variables.set(\"RANDOM_AUDIOBOOK\",audiobook);",
					"",
					"",
					"",
					"const key =_.random(10001, 999999999);",
					"",
					"const copier = {",
					"        \"key\": key,",
					"        \"freestanding\": true,",
					"        \"connectors\": [],",
					"        \"wireless\": [],",
					"        \"color\": true,",
					"        \"scanDPI\": _.random(10, 2000),",
					"        \"bwPagesPerMinute\": _.random(1, 20),",
					"        \"colorPagesPerMinute\": _.random(1,10),",
					"        \"scansPerMinute\": _.random(10001, 999999999),",
					"        \"printDPI\": _.random(100,)",
					"    }",
					"const connCount = _.random(1,10);",
					"for (let i = 0; i < connCount; i++) {",
					"    copier.connectors.push(pm.variables.replaceIn(\"{{$randomCatchPhraseAdjective}}\"))",
					"}",
					"",
					"const wirelessCount = _.random(1,10);",
					"for (let i = 0; i < wirelessCount; i++) {",
					"    copier.wireless.push(pm.variables.replaceIn(\"{{$randomProductName}}\"))",
					"}",
					"",
					"pm.variables.set(\"RANDOM_COPIER\",copier);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "localhost:8080"
		}
	]
}